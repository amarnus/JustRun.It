{"go": {"code": "package main\n \nimport \"fmt\"\n \nvar a = []int{170, 45, 75, -90, -802, 24, 2, 66}\nvar s = make([]int, len(a)/2+1) // scratch space for merge step\n \nfunc main() {\n    fmt.Println(\"before:\", a)\n    mergeSort(a)\n    fmt.Println(\"after: \", a)\n}\n \nfunc mergeSort(a []int) {\n    if len(a) < 2 {\n        return\n    }\n    mid := len(a) / 2\n    mergeSort(a[:mid])\n    mergeSort(a[mid:])\n    if a[mid-1] <= a[mid] {\n        return\n    }\n    // merge step, with the copy-half optimization\n    copy(s, a[:mid])\n    l, r := 0, mid\n    for i := 0; ; i++ {\n        if s[l] <= a[r] {\n            a[i] = s[l]\n            l++\n            if l == mid {\n                break\n            }\n        } else {\n            a[i] = a[r]\n            r++\n            if r == len(a) {\n                copy(a[i+1:], s[l:mid])\n                break\n            }\n        }\n    }\n    return\n}", "deps": [], "language_code": "go", "is_public": false}, "python": {"code": "from heapq import merge\n \ndef merge_sort(m):\n    if len(m) <= 1:\n        return m\n \n    middle = len(m) // 2\n    left = m[:middle]\n    right = m[middle:]\n \n    left = merge_sort(left)\n    right = merge_sort(right)\n    return list(merge(left, right))\n\nprint merge_sort([99, 45, 100, 73, 5])", "deps": [], "language_code": "python", "is_public": false}, "javascript": {"code": "function merge(left,right,arr){\n\tvar a=0;\n\twhile(left.length&&right.length)\n\t\tarr[a++]=right[0]<left[0]?right.shift():left.shift();\n\twhile(left.length)arr[a++]=left.shift();\n\twhile(right.length)arr[a++]=right.shift();\n}\nfunction mSort(arr,tmp,l){\n\tif(l==1)return;\n\tvar \tm=Math.floor(l/2),\n\t\ttmp_l=tmp.slice(0,m),\n\t\ttmp_r=tmp.slice(m);\n\tmSort(tmp_l,arr.slice(0,m),m);\n\tmSort(tmp_r,arr.slice(m),l-m);\n\tmerge(tmp_l,tmp_r,arr);\n}\nfunction merge_sort(arr){\n\tmSort(arr,arr.slice(),arr.length);\n}\n \nvar arr=[1,5,2,7,3,9,4,6,8];\nmerge_sort(arr);", "deps": [], "language_code": "javascript", "is_public": false}, "ruby": {"code": "class Array\n  def mergesort(&comparitor)\n    return self if length <= 1\n    comparitor ||= lambda {|a, b| a <=> b}\n    middle = length / 2\n    left  = self[0,  middle].mergesort(&comparitor)\n    right = self[middle..-1].mergesort(&comparitor)\n    merge(left, right, comparitor) \n  end\n \n  private\n  def merge(left, right, comparitor)\n    result = []\n    until left.empty? || right.empty?\n      # change the direction of this comparison to change the direction of the sort\n      if comparitor[left.first, right.first] <= 0\n        result << left.shift\n      else\n        result << right.shift\n      end\n    end\n    result + left + right\n  end\nend\n \nary = [7,6,5,9,8,4,3,1,2,0]\np ary.mergesort", "deps": [], "language_code": "ruby", "is_public": false}, "php": {"code": "function mergesort($arr){\n\tif(count($arr) == 1 ) return $arr;\n\t$mid = count($arr) / 2;\n    $left = array_slice($arr, 0, $mid);\n    $right = array_slice($arr, $mid);\n\t$left = mergesort($left);\n\t$right = mergesort($right);\n\treturn merge($left, $right);\n}\n \nfunction merge($left, $right){\n\t$res = array();\n\twhile (count($left) > 0 && count($right) > 0){\n\t\tif($left[0] > $right[0]){\n\t\t\t$res[] = $right[0];\n\t\t\t$right = array_slice($right , 1);\n\t\t}else{\n\t\t\t$res[] = $left[0];\n\t\t\t$left = array_slice($left, 1);\n\t\t}\n\t}\n\twhile (count($left) > 0){\n\t\t$res[] = $left[0];\n\t\t$left = array_slice($left, 1);\n\t}\n\twhile (count($right) > 0){\n\t\t$res[] = $right[0];\n\t\t$right = array_slice($right, 1);\n\t}\n\treturn $res;\n}\n \n$arr = array( 1, 5, 2, 7, 3, 9, 4, 6, 8);\n$arr = mergesort($arr);\necho implode(',',$arr);", "deps": [], "language_code": "php", "is_public": false}}
